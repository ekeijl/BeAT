from django import forms
from django.forms import widgets
from django.db.models import Count
from beat.benchmarks.models import Benchmark

class ExportForm(forms.Form):
	benchmarks = forms.ModelMultipleChoiceField(Benchmark.objects.all(), required=False, widget=widgets.CheckboxSelectMultiple)
	name = forms.CharField(max_length=255, required=False)

class ToolUploadForm(forms.Form):
	tool_name = forms.CharField(max_length=255, required=True, label="Tool Name", help_text='The name of the tool (example: "nips")')
	algorithm_name = forms.CharField(max_length=255, required=True, label = "Algorithm Name", help_text='The name of the back-end algorithm (example: "2lts-grey")')
	version_name = forms.CharField(max_length=255, required=True, label="Version", help_text='The version output of the new tool (example: "ltsmin-1.5-20-g6d5d0c")')
	expression = forms.CharField(required=True, label="Regular Expression", help_text='The regular expression that should be used to parse output generated by this tool. Group names used by default: etime (elapsed time), utime (user time), stime (system time), tcount (transition count), scount (state count), vsize (virtual memory size), rss (Resident Set Size), kill (matches nothing if the run finished properly)')
	test_log = forms.CharField(widget=forms.Textarea, required=False, label="Test log (optional)", help_text='Use this field in conjunction with the "test regex" button below to test your regular expression on a log. The generated data is presented in the field below when the button is clicked.')
	log_check = forms.CharField(widget=forms.Textarea, required=False, label="Result of the test log")
	options = forms.CharField(widget=forms.Textarea, help_text='Options should be provided here. There should be one option per line. Short options (eg. "-c" for "--cache") can be entered as follows: "--cache:c" or ":x". If the option takes an argument, an "=" sign should precede the colon.')

#class LogResponseForm(forms.Form):
#	response = forms.CharField(widget=forms.Textarea)
