from django import forms
from django.forms import widgets
from django.db.models import Count
from beat.benchmarks.models import Benchmark

class ExportForm(forms.Form):
	benchmarks = forms.ModelMultipleChoiceField(Benchmark.objects.all(), required=False, widget=widgets.CheckboxSelectMultiple)
	name = forms.CharField(max_length=255, required=False)

class ToolUploadForm(forms.Form):
	tool_name = forms.CharField(max_length=255, required=True, label="Tool Name", help_text='The name of the tool (example: "nips")')
	algorithm_name = forms.CharField(max_length=255, required=True, label = "Algorithm Name", help_text='The name of the back-end algorithm (example: "2lts-grey")')
	version_name = forms.CharField(max_length=255, required=True, label="Version", help_text='The version output of the new tool (example: "ltsmin-1.5-20-g6d5d0c")')
	expression = forms.CharField(widget=forms.Textarea,required=True, label="Regular Expression", help_text='<a href="#test">Test your regular expression</a><br />Example: <blockquote style="font-family:courier;font-style:normal;">lps-reach: .*(&#92;r&#92;n|&#92;n)(<b>(?P&lt;kill&gt;Killed|.*?error:.*)</b>|lps-reach: reachability took.*(&#92;r&#92;n|&#92;n)state space has <b>(?P&lt;scount&gt;\d+)</b> states.*; <b>(?P&lt;peakNodes&gt;\d+)</b> peak nodes.*(&#92;r&#92;n|&#92;n)Exit) \[[0-9]+\](&#92;r&#92;n|&#92;n)<b>(?P&lt;utime&gt;[0-9.]+)</b> user, <b>(?P&lt;stime&gt;[0-9.]+)</b> system, <b>(?P&lt;etime&gt;[0-9.]+)</b> elapsed --( Max | )VSize = <b>(?P&lt;vsize&gt;\d+)</b>KB,( Max | )RSS = <b>(?P&lt;rss&gt;\d+)</b>KB</blockquote> <p>The regular expression that should be used to parse output generated by this tool. A group name is used as:</p><blockquote style="font-family:courier;font-style:normal;">(?P&lt;groupname&gt;regex)</blockquote><p>Group names used by default:</p> <ul><li>etime (elapsed time)</li><li>utime (user time)</li><li>stime (system time)</li><li>tcount (transition count)</li><li>scount (state count)</li><li>vsize (virtual memory size)</li><li>rss (Resident Set Size)</li><li>kill (matches nothing if the run finished properly)</li></ul>')
	#test_log = forms.CharField(widget=forms.Textarea, required=False, label="Test log (optional)", help_text='Use this field in conjunction with the "test regex" button below to test your regular expression on a log. The generated data is presented in the field below when the button is clicked.')
	#log_check = forms.CharField(widget=forms.Textarea, required=False, label="Result of the test log")
	options = forms.CharField(widget=forms.Textarea, help_text='Options should be provided here. There should be one option per line. Short options (eg. "-c" for "--cache") can be entered as follows: "--cache:c" or ":x". If the option takes an argument, an "=" sign should precede the colon.')

#class LogResponseForm(forms.Form):
#	response = forms.CharField(widget=forms.Textarea)
