import os
if "DJANGO_SETTINGS_MODULE" not in os.environ:
	os.environ["DJANGO_SETTINGS_MODULE"] = "beat.settings"

from beat.benchmarks.models import *
from datetime import datetime
import sys
import time

dummydate = datetime.now()
with_git = False
if "with_git" in sys.argv:
	with_git = True
	from beat.gitinterface import *
	repository = GitInterface(GIT_PATH)
	if not os.path.exists(os.path.join(GIT_PATH,"ltsmin")):
		repository.clone_repository("http://fmt.cs.utwente.nl/tools/scm/ltsmin.git")
	repository.switch_repository(os.path.join(GIT_PATH, "ltsmin"))
	repository.pull_from_git("http://fmt.cs.utwente.nl/tools/scm/ltsmin.git")

version = "ltsmin-1.5-20-g6d5d0c"
if with_git:
	dummydate = datetime(*repository.get_date(repository.get_matching_item(version[-6:]))[:6])

do_import(version)

def do_import(version):
	emptyregex, created = Regex.objects.get_or_create(regex='')
	hw, created = Hardware.objects.get_or_create(name="x", memory=600, cpu='AMD', disk_space=21456, kernelversion='2.6.32')
	###################### nips version 1, 2lts-grey ######################
	a, created = Algorithm.objects.get_or_create(name='2lts-grey')
	t, created = Tool.objects.get_or_create(name='nips')
	rx, created = Regex.objects.get_or_create(regex='nips2lts-grey: .*(\\r\\n|\\n)(nips2lts-grey: state space has \\d+ levels (?P<scount>\\d+) states (?P<tcount>\\d+).*(\\r\\n|\\n)Exit|(?P<kill>Killed|.*segmentation fault.*)) \\[[0-9]+\\](\\r\\n|\\n)(?P<utime>[0-9.]+) user, (?P<stime>[0-9.]+) system, (?P<etime>[0-9.]+) elapsed --( Max | )VSize = (?P<vsize>\\d+)KB,( Max | )RSS = (?P<rss>\\d+)KB')
	at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=dummydate, version=version)
	#at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=repository.get_date(repository.get_matching_item(version[version.rindex('-')+1:])), version=version)
	op, created = Option.objects.get_or_create(name='--strategy', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--deadlock', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='d')
	op, created = Option.objects.get_or_create(name='--trace', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='c')
	op, created = Option.objects.get_or_create(name='--regroup', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='r')
	op, created = Option.objects.get_or_create(name='--vset', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache-ratio', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--max-increase', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--min-free-nodes', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--fdd-bits', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--block-size', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cluster-size', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--plain', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--grey', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--matrix', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--write-state', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--debug', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--version', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--help', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='h')
	op, created = Option.objects.get_or_create(name='--usage', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name=' v', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='v')
	op, created = Option.objects.get_or_create(name=' q', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='q')
	###################### end of: nips version 1, 2lts-grey ######################
	###################### lpo version 1, 2lts-grey			 ######################
	a, created = Algorithm.objects.get_or_create(name='2lts-grey')
	t, created = Tool.objects.get_or_create(name='lpo')
	rx, created = Regex.objects.get_or_create(regex='lpo2lts-grey: .*(\\r\\n|\\n)(lpo2lts-grey: state space has \\d+ levels (?P<scount>\\d+) states (?P<tcount>\\d+) .*(\\r\\n|\\n)Exit|(?P<kill>Killed|.*segmentation fault.*)) \\[[0-9]+\\](\\r\\n|\\n)(?P<utime>[0-9.]+) user, (?P<stime>[0-9.]+) system, (?P<etime>[0-9.]+) elapsed --( Max | )VSize = (?P<vsize>\\d+)KB,( Max | )RSS = (?P<rss>\\d+)KB')
	at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=dummydate, version=version)
	#at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=repository.get_date(repository.get_matching_item(version[version.rindex('-')+1:])), version=version)
	op, created = Option.objects.get_or_create(name='--strategy', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--state', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--deadlock', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='d')
	op, created = Option.objects.get_or_create(name='--trace', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--state-names', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--mcrl', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='c')
	op, created = Option.objects.get_or_create(name='--regroup', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='r')
	op, created = Option.objects.get_or_create(name='--vset', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache-ratio', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--max-increase', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--min-free-nodes', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--fdd-bits', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--block-size', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cluster-size', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--plain', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--grey', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--matrix', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--write-state', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--debug', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--version', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--help', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='h')
	op, created = Option.objects.get_or_create(name='--usage', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name=' v', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='v')
	op, created = Option.objects.get_or_create(name=' q', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='q')
	###################### end of: lpo version 1, 2lts-grey ######################
	###################### lpo version 1, -reach			 ######################
	a, created = Algorithm.objects.get_or_create(name='-reach')
	t, created = Tool.objects.get_or_create(name='lpo')
	rx, created = Regex.objects.get_or_create(regex='lpo-reach: .*(\\r\\n|\\n)(lpo-reach: reachability took.*(\\r\\n|\\n)state space has (?P<scount>\\d+) states.*(\\r\\n|\\n)Exit|(?P<kill>Killed|.*segmentation fault.*)) \\[[0-9]+\\](\\r\\n|\\n)(?P<utime>[0-9.]+) user, (?P<stime>[0-9.]+) system, (?P<etime>[0-9.]+) elapsed --( Max | )VSize = (?P<vsize>\\d+)KB,( Max | )RSS = (?P<rss>\\d+)KB')
	at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=dummydate, version=version)
	#at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=repository.get_date(repository.get_matching_item(version[version.rindex('-')+1:])), version=version)
	op, created = Option.objects.get_or_create(name='--order', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--deadlock', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='d')
	op, created = Option.objects.get_or_create(name='--trace', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--state-names', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--mcrl', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='c')
	op, created = Option.objects.get_or_create(name='--regroup', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='r')
	op, created = Option.objects.get_or_create(name='--vset', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache-ratio', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--max-increase', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--min-free-nodes', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--fdd-bits', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--debug', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--version', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--help', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='h')
	op, created = Option.objects.get_or_create(name='--usage', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name=' v', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='v')
	op, created = Option.objects.get_or_create(name=' q', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='q')
	###################### end of: lpo version 1, -reach ######################
	#		###this still needs converting or removing
	#			"ltsmin", "ltsmin", "ltsmin",
	#			r'.*\\nreduced LTS has (?P<scount>\\d+) states and'
	#			+'  (?P<tcount>\\d+).*\\nExit \\[[0-9]+\\]\\n(?P<utime>[0-9\\.]+)'
	#			+' user, (?P<stime>[0-9\\.]+) system, (?P<etime>[0-9\\.]+) elapsed '
	#			+'--( Max | )VSize = (?P<vsize>\\d+)KB,( Max | )RSS = (?P<rss>\\d+)KB',
	#			'',
	#			[
	#			]
	###################### nips version 1, -reach			 ######################
	a, created = Algorithm.objects.get_or_create(name='-reach')
	t, created = Tool.objects.get_or_create(name='nips')
	rx, created = Regex.objects.get_or_create(regex='nips-reach: .*(\\r\\n|\\n)(nips-reach: reachability took.*(\\r\\n|\\n)state space has (?P<scount>\\d+) states.*(\\r\\n|\\n)Exit|(?P<kill>Killed|.*segmentation fault.*)) \\[[0-9]+\\](\\r\\n|\\n)(?P<utime>[0-9.]+) user, (?P<stime>[0-9.]+) system, (?P<etime>[0-9.]+) elapsed --( Max | )VSize = (?P<vsize>\\d+)KB,( Max | )RSS = (?P<rss>\\d+)KB')
	at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=dummydate, version=version)
	op, created = Option.objects.get_or_create(name='--order', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--deadlock', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='d')
	op, created = Option.objects.get_or_create(name='--trace', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='c')
	op, created = Option.objects.get_or_create(name='--regroup', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='r')
	op, created = Option.objects.get_or_create(name='--vset', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache-ratio', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--max-increase', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--min-free-nodes', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--fdd-bits', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--debug', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--version', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--help', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='h')
	op, created = Option.objects.get_or_create(name='--usage', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name=' v', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='v')
	op, created = Option.objects.get_or_create(name=' q', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='q')
	###################### end of: nips version 1, -reach ######################
	###################### etf version 1, 2lts-grey ######################
	a, created = Algorithm.objects.get_or_create(name='2lts-grey')
	t, created = Tool.objects.get_or_create(name='etf')
	rx, created = Regex.objects.get_or_create(regex='etf2lts-grey: .*(\\r\\n|\\n)(etf2lts-grey: state space has \\d+ levels (?P<scount>\\d+) states (?P<tcount>\\d+) .*(\\r\\n|\\n)Exit|(?P<kill>Killed|.*segmentation fault.*)) \\[[0-9]+\\](\\r\\n|\\n)(?P<utime>[0-9.]+) user, (?P<stime>[0-9.]+) system, (?P<etime>[0-9.]+) elapsed --( Max | )VSize = (?P<vsize>\\d+)KB,( Max | )RSS = (?P<rss>\\d+)KB')
	at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=dummydate, version=version)
	op, created = Option.objects.get_or_create(name='--strategy', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--state', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--deadlock', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='d')
	op, created = Option.objects.get_or_create(name='--trace', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='c')
	op, created = Option.objects.get_or_create(name='--regroup', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='r')
	op, created = Option.objects.get_or_create(name='--vset', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache-ratio', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--max-increase', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--min-free-nodes', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--fdd-bits', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--block-size', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cluster-size', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--plain', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--grey', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--matrix', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--write-state', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--debug', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--version', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--help', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='h')
	op, created = Option.objects.get_or_create(name='--usage', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name=' v', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='v')
	op, created = Option.objects.get_or_create(name=' q', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='q')
	###################### end of: etf version 1, 2lts-grey ######################
	###################### etf version 1, -reach			 ######################
	a, created = Algorithm.objects.get_or_create(name='-reach')
	t, created = Tool.objects.get_or_create(name='etf')
	rx, created = Regex.objects.get_or_create(regex='etf-reach: .*(\\r\\n|\\n)etf-reach: reachability took.*(\\r\\n|\\n)(state space has (?P<scount>\\d+) states.*(\\r\\n|\\n)Exit|(?P<kill>Killed|.*segmentation fault.*)) \\[[0-9]+\\](\\r\\n|\\n)(?P<utime>[0-9.]+) user, (?P<stime>[0-9.]+) system, (?P<etime>[0-9.]+) elapsed --( Max | )VSize = (?P<vsize>\\d+)KB,( Max | )RSS = (?P<rss>\\d+)KB')
	at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=dummydate, version=version)
	op, created = Option.objects.get_or_create(name='--order', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--deadlock', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='d')
	op, created = Option.objects.get_or_create(name='--trace', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='c')
	op, created = Option.objects.get_or_create(name='--regroup', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='r')
	op, created = Option.objects.get_or_create(name='--vset', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache-ratio', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--max-increase', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--min-free-nodes', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--fdd-bits', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--debug', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--version', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--help', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='h')
	op, created = Option.objects.get_or_create(name='--usage', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name=' v', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='v')
	op, created = Option.objects.get_or_create(name=' q', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='q')
	###################### end of: etf version 1, -reach ######################
	###################### dve version 1, -reach			 ######################
	a, created = Algorithm.objects.get_or_create(name='-reach')
	t, created = Tool.objects.get_or_create(name='dve')
	rx, created = Regex.objects.get_or_create(regex='dve-reach: .*(\\r\\n|\\n)(dve-reach: reachability took.*(\\r\\n|\\n)state space has (?P<scount>\\d+) states.*\\( (?P<BDDNodes>\\d+) final BDD nodes; (?P<peakNodes>\\d+) peak nodes.*(\\r\\n|\\n)Exit|(?P<kill>Killed|.*segmentation fault.*|.*\*\* error .*)) \\[[0-9]+\\](\\r\\n|\\n)(?P<utime>[0-9.]+) user, (?P<stime>[0-9.]+) system, (?P<etime>[0-9.]+) elapsed --( Max | )VSize = (?P<vsize>\\d+)KB,( Max | )RSS = (?P<rss>\\d+)KB')
	at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=dummydate, version=version)
	op, created = Option.objects.get_or_create(name='--order', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--deadlock', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='d')
	op, created = Option.objects.get_or_create(name='--trace', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='c')
	op, created = Option.objects.get_or_create(name='--regroup', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='r')
	op, created = Option.objects.get_or_create(name='--vset', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache-ratio', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--max-increase', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--min-free-nodes', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--fdd-bits', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--debug', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--version', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--help', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='h')
	op, created = Option.objects.get_or_create(name='--usage', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name=' v', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='v')
	op, created = Option.objects.get_or_create(name=' q', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='q')
	###################### end of: dve version 1, -reach ######################
	###################### dve version 1, 2lts-grey ######################
	a, created = Algorithm.objects.get_or_create(name='2lts-grey')
	t, created = Tool.objects.get_or_create(name='dve')
	rx, created = Regex.objects.get_or_create(regex='dve2lts-grey: .*(\\r\\n|\\n)(dve2lts-grey: state space has \\d+ levels (?P<scount>\\d+) states (?P<tcount>\\d+) .*(\\r\\n|\\n)Exit|(?P<kill>Killed|.*error.*|BDD error.*)) \\[[0-9]+\\](\\r\\n|\\n)(?P<utime>[0-9.]+) user, (?P<stime>[0-9.]+) system, (?P<etime>[0-9.]+) elapsed --( Max | )VSize = (?P<vsize>\\d+)KB,( Max | )RSS = (?P<rss>\\d+)KB')
	at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=dummydate, version=version)
	op, created = Option.objects.get_or_create(name='--strategy', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--state', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--deadlock', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='d')
	op, created = Option.objects.get_or_create(name='--trace', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='c')
	op, created = Option.objects.get_or_create(name='--regroup', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='r')
	op, created = Option.objects.get_or_create(name='--vset', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache-ratio', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--max-increase', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--min-free-nodes', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--fdd-bits', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--block-size', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cluster-size', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--plain', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--grey', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--matrix', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--write-state', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--debug', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--version', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--help', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='h')
	op, created = Option.objects.get_or_create(name='--usage', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name=' v', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='v')
	op, created = Option.objects.get_or_create(name=' q', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='q')
	###################### end of: dve version 1, 2lts-grey ######################
	###################### lps version 1, 2lts-grey ######################
	a, created = Algorithm.objects.get_or_create(name='2lts-grey')
	t, created = Tool.objects.get_or_create(name='lps')
	rx, created = Regex.objects.get_or_create(regex='lps2lts-grey: .*(\\r\\n|\\n)((?P<kill>Killed|.*?error:.*)|lps2lts-grey: state space has \\d+ levels (?P<scount>\\d+) states (?P<tcount>\\d+) .*(\\r\\n|\\n)Exit) \\[[0-9]+\\](\\r\\n|\\n)(?P<utime>[0-9.]+) user, (?P<stime>[0-9.]+) system, (?P<etime>[0-9.]+) elapsed --( Max | )VSize = (?P<vsize>\\d+)KB,( Max | )RSS = (?P<rss>\\d+)KB')
	at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=dummydate, version=version)
	op, created = Option.objects.get_or_create(name='--strategy', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--state', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--deadlock', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='d')
	op, created = Option.objects.get_or_create(name='--trace', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--mcrl2', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='c')
	op, created = Option.objects.get_or_create(name='--regroup', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='r')
	op, created = Option.objects.get_or_create(name='--vset', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache-ratio', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--max-increase', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--min-free-nodes', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--fdd-bits', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--block-size', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cluster-size', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--plain', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--grey', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--matrix', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--write-state', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--debug', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--version', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--help', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='h')
	op, created = Option.objects.get_or_create(name='--usage', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name=' v', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='v')
	op, created = Option.objects.get_or_create(name=' q', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='q')
	###################### end of: lps version 1, 2lts-grey ######################
	###################### lps version 1, -reach			 ######################
	a, created = Algorithm.objects.get_or_create(name='-reach')
	t, created = Tool.objects.get_or_create(name='lps')
	rx, created = Regex.objects.get_or_create(regex='lps-reach: .*(\\r\\n|\\n)((?P<kill>Killed|.*?error:.*)|lps-reach: reachability took.*(\\r\\n|\\n)state space has (?P<scount>\\d+) states.*; (?P<peakNodes>\\d+) peak nodes.*(\\r\\n|\\n)Exit) \\[[0-9]+\\](\\r\\n|\\n)(?P<utime>[0-9.]+) user, (?P<stime>[0-9.]+) system, (?P<etime>[0-9.]+) elapsed --( Max | )VSize = (?P<vsize>\\d+)KB,( Max | )RSS = (?P<rss>\\d+)KB')
	at, created = AlgorithmTool.objects.get_or_create(algorithm=a, tool=t, regex=rx, date=dummydate, version=version)
	op, created = Option.objects.get_or_create(name='--order', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--deadlock', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='d')
	op, created = Option.objects.get_or_create(name='--trace', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='c')
	op, created = Option.objects.get_or_create(name='--regroup', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='r')
	op, created = Option.objects.get_or_create(name='--vset', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--cache-ratio', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--max-increase', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--min-free-nodes', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--fdd-bits', takes_argument=True)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--debug', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--version', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name='--help', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='h')
	op, created = Option.objects.get_or_create(name='--usage', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	op, created = Option.objects.get_or_create(name=' v', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='v')
	op, created = Option.objects.get_or_create(name=' q', takes_argument=False)
	vo, created = ValidOption.objects.get_or_create(algorithm_tool=at, option=op, defaults={'regex':emptyregex})
	rs, created = RegisteredShortcut.objects.get_or_create(algorithm_tool=at, option=op, shortcut='q')
	###################### end of: lps version 1, -reach ######################
